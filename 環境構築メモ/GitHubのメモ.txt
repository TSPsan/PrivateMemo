GitHub
(*ssh通信を忘れずに！)
(ssh-agentを使用すること)

* 前提としてsshの公開鍵と秘密鍵の生成、通信先のページに公開鍵を登録し、
  sshの通信を試して成功の確認をしてある。

1, リモートリポジトリの作成はGitHubのページから作成。

2, その後、ローカルのリポジトリをリモートへpushしたが失敗した。
  エラー文で
		$ git@github.com: Permission denied (publickey).
		$ fatal: Could not read from remote repository.

		$ Please make sure you have the correct access rights
		$ and the repository exists.
	と表示された。

  → ssh-agentで秘密鍵を保持していなかったのが原因だった。

    sshの通信は、公開鍵で暗号化し、秘密鍵で復元する方法である。
		sshを使用して通信をする際、「秘密鍵」をaah-agentが持っていないと通信ができない。
		* 秘密鍵(公開鍵もだが)は所有ユーザのみ読み書き可能(パーミッション: 600)の設定であるため、
			ssh-agentで秘密鍵を持たせる必要があった。
		*	ちなみに他のページ(GitHub, Heroku)に登録してあるのは「公開鍵」である。

		ローカル(公開鍵で暗号化) → リモート(秘密鍵で解読)
		ここの時にリモート側に秘密鍵が必要だった。

	sshの操作
		$ exec ssh-agent $SHELL → ssh-agent起動
		$ ssh-add 秘密鍵のパス  → 秘密鍵を保持する
		$ ssh-add -l            → 保持している鍵の確認確認

  これで通信が可能になりpushが行えた。


-------------------------------------------------------------------------------------------------------------------------
2020/ 09/ 03
  【ドットファイルの設定】

  リモートでも.vimrcのファイルを利用して環境構築したい。
  GitHubでファイルを管理することでファイルを会社でもダウンロード可能。

  0: .vimrcファイルの移動(この設定で既存のVimが使えたままにする。)
		.vimrcをdotfilesディレクトリに「_vimrc」で入れる。(_vimrcがWindowsでのファイル形式)
		シンボリックリンク作成して対応する
			$ ln -s ~/dotfiles/_vimrc ~/.vimrc
		完了。これで通常通りVim起動できる。

  1: WebのGitHubでリモートリポジトリ作る
			作ってあるURL
			https://github.com/TSPsan/dotfiles.git 

  2: Git & GitHubで管理
    対象のディレクトリをgit管理
			$ git init
    リモートリポジトリのステージに乗せる。
			$ git remote add dotfiles(リポジトリ名) git@github.com:TSPsan/dotfiles.git(出力先のアドレス指定)
			(リモート名の設定。リモートのアドレス指定。httpsではなく、sshアドレスを指定。
    リモートへ反映。事前にssh通信設定忘れずに。
			$ git push dotfiles master
	-------------------------------------------------------------------------------------------------------------------------

【ブックマークのGitHub管理】
  自宅PCのブックマークを仕事場でも共有したい。勿論、GitHubでの管理をすればpushからのpullで自宅と仕事場の双方向に反映可能。

1: 現状、出力はすべてのブックマークを対象に行う。Chromeの機能で一部のブックマークのみの出力はできない。
   HTML形式なので強引にVimエディタ手打ちで整理できるが面倒だ。

2: 出力する度に新しいファイルを生成するのでGitの概念である「既存のファイルの変更を管理」に反する。
   → Linuxで差分を比較してファイルを既存のファイルに加えると解決か？

   とりあえずHTML形式で強引に編集をする形式しかない。
   まぁ最悪、不必要なブックマークを消す作業は会社PC上にそのままインポートしてから行えばよい。
   就職するまでこの作業は保留。dotfilesリポジトリに入れる予定。
	-------------------------------------------------------------------------------------------------------------------------

【WindowsとUbuntuでのファイル併用したGit利用について】
理想: Git本体はWindowsにおいてUbuntu側(仮想環境)からはシンボリックリンクで利用。
     Windows内でGitインストール。Ubuntu側がシンボリックリンクで柔軟に対応する形式。
  → 現状は最初にUbuntuで作業を開始したため、Windows側にはGitがない状態。この方法はできない。

  → Ubuntu側のGitを丸ごとWindowsへ引っ越そうと思ったけど、Ubtuntu内のGit本体の場所がわからず断念。
     よって、GitはUbuntu側ですべて操作する。Gitで管理したいファイルの場所はWindows内でもおｋ。
    本当は両方のOSから1つのGitアカウントで操作したい。

	問題:
    WSLは不完全のバージョン。WSL2へ移行したいけどこのGitのアカウントはどうなるの？
    Windows内での作業ができない。現状ではEclipseのGit連携機能を諦めることになる。
    (2022/ 04/ 12 追記: WSLのバージョンは自動でアップデートされる。今はWSL2)

思ったこと + 解決方法:
    Gitはアカウント(Eメールアドレス、パスワード)があればどのPCでもそのアカウントとして操作できる。
    もし上記の仕様であるならば下記の方法でWindowsとWSL(Ubuntu)の両側の利用が可能になる。
    Windows側の作業は、WindowsにGit導入をしてアカウントを指定して利用開始。

    その他のメモ類もGitHubに新しくリポジトリを作る。ブックマークと同じく就職してからでよいか。

2022/ 04/ 12 
  github、Herokuへのsshキーは1年使わないと破棄される。
  よって新しく生成しなおす。

  1: $ ssh-keygen -t ed25519 -C "vsig7fs42v8a@gmail.com"
    -t のオプションは暗号方式。今回、GitHubの案内通り新しい暗号で生成。-Cはコメント。
  2: ファイル名を変更(コマンドライン操作でなく、普段の操作でおｋ。)
		鍵の名前を一意に命名する。GitHubならファイル名を id_ed25519_github のようにする
    個人用なので id_red25519_github_pri にした。
  3: .sshフォルダのconfigを書き換え
		IdentityFile ~/.ssh/id_ed255519_github_pri
  4: GitHubの設定ページでsshの公開鍵(テキスト文)をペースト、登録
  これでおｋ。
  あとはいつも通りssh-agentで秘密鍵を保持してアクセスできる。

  Herokuも同様。

  ちなみにGitHubはsshの接続を提供しているが、コマンドシェルでの操作は受け付けていない。
  接続した際(今回は接続テスト)、
    Hi TSPsan! You've successfully authenticated, but GitHub does not provide shell access.
  となるが問題ない。
