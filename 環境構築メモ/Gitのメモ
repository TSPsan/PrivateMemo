ローカルリポジトリの取得
	git init: カレントディレクトリでのGit管理開始宣言

	git clone: リモートリポジトリにあるファイルを複製してGitの管理開始する
		例: git clone https://~... プロジェクトA
		→「プロジェクトA」というディレクトリにリモートリポジトリが複製される

ローカルリポジトリに変更を反映
	git add ~.: ファイルの追跡開始(対象: ~)、変更をGitのステージに乗せる。
	git commit: リポジトリに反映
	git pull  : リモートリポジトリの内容(変更)をローカルリポジトリに反映する。

  commit:
		-mフラグを使うと、コミットメッセージをコマンドラインで直接指定できる。
		-mフラグを使わない場合はシステムのデフォルトのエディタが開き、そこでコミットメッセージを入力する。
    --amendで最後のコミットをやり直すことができる(ファイルを追加してコミットしたこともできる)。コミットは新たには発生していない。

リモートリポジトリに反映
	git remote add <name> <url>: ローカルで管理しているリポジトリをリモートリポジトリに新たに追加する。名前はoriginが慣習なので省略してもよい。
		例: $ git remote add (origin) https://~...
	git push <origin> <refspec>: リモートリポジトリに反映
		例: $ git push origin master

Gitの状態確認
	git status              : ディレクトリ上の追跡しているファイルの状態確認
	git log --graph --online: 履歴確認する。--graphでコンソール上にテキスト図で表現する。--onlineでコミットの情報を一行で表現する。
	gitk                    : GUIツール上でリポジトリの変更履歴の確認が可能

	ログがある程度以上長い場合は、qキーを押して終了する。

マージについて(Gitコマンドのmergeでおきる。)
リモートリポジトリに2者からの変更が行われると発生する。(競合)

	取扱ったファイルが違う場合、例: 他者はファイルA、自分はファイルBの変更
	Gitが自動で補完してくれる。

  取扱ったファイルが同じ場合、例: 両者ファイルAの変更
	Gitが保管できない問題個所を(===)で区切って手動での修正を求める。
	===を消すとpushが可能になる。

	→ ===だけ消して修正をせずに握りつぶしてはいけない！

	merge --no-ff(--no-Fast-Forward)
		でコミットメッセージが要求される。(エディタが開く)
  オプション無しの「merge」だとFast-Forwordになってしまうので気を付ける。

origin       : リモートリポジトリそのもの(初期名)
master       : リポジトリ(ローカル/リモートにそれそれぞれある)の初期ブランチ名(自動生成)
	例: $ git push origin master: リモートリポジトリのoriginに向けてローカルリポジトリのマスターブランチを反映する
origin/master: リモートリポジトリのマスターブランチを示すディレクトリ構造。
	余談:	「origin master」: この引数だけ切り取って説明してある記事あって誤解を招いている。

checkout ~(ブランチ名): ブランチ移動する。-fのオプションで今までの操作(変更、追加、削除など)を強制的に無くしてブランチの状態に戻す。

オプションの -d や -f は「destroy」「force」の意味なので、Gitに限らずコマンドでは気を付ける。(というか使ってはダメ。)

