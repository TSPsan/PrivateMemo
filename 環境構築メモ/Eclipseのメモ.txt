2021/ 10/ 26
  Eclipseの更新
    『All in One』
    JavaのEclipseは4年サイクルでLTS(長期サポート)になった。
    Springやlombook.jarを搭載済み(@アノテーションでgetter, setter簡単に実装)...etc。
  これでEclipseの互換性は気にしなくてよい。
  Java17の新文法を使えて便利。
  Eclipseのパースペクティブにあるランナーが表示されない
    Eclipseのクリーン(既存キャッシュのクリア)が自動でされないなら手動でやる
			コマンドプロンプトで『pleiades/ eclipse(eclipse.exeがあるディレクトリ)』まで移動
			eclipse.exe -cleanを実行
			更新時のエラーは大抵がキャッシュの問題なのでこれで解決するっぽい。
		上手く解決しないのでEclipseインストールし直した
      Pleiades全体ではなく、Pleiades内のEclipseフォルダを削除して再インストール。
      アンインストールツールは無い。ディレクトリを削除をする。
    普通にキャッシュのクリーンがEclipseの機能にある。

  UbuntuのGitとの連携問題は未解決。

2021/ 10/ 26
	Eclipseをバージョンアップ(名称: All in One)。つか再インストール。
    Eclipseの メニュー → ヘルプ -> Check for Updates から更新可能。
    だがこの方法が分からず、インストールし直した。
    そのままワークスペース置き換えたが果たして...? -> 大丈夫ぽい。
    
    プロジェクト単位でJavaのバージョン(静的解析のコンパイラ)が違うので気を付けること。
      デザインパターンは最新のバージョンにしてある。

    Javaを17にアップグレード!
		Javaがバージョンアップで文法が簡易になってる。
    
			昨日の勉強(TemplateMthodパターン)の繰り返し部分の処理も簡易になった
			repeat();   結局Commons要らなくなった。標準APIがCommonsの一部を巻き取った。
			Pathインタフェース(Paths抽象クラスのPaths.get("*.txt")を使わずに済む。これからはこっちが標準？)
      Path.of("*.txt");
			(adapterパターンのIO関連クラスFilesも新メソッド追加)
      Files.readAllLines // -> List<String>
      Files.readString   // -> String
			1行でファイルの読み書きできるようになった
    
    String が改行しても1つの文字列として可能になった。テキストブロック導入
    『 """ 』のダブルクォーテーションを3つ用意することでおｋ。
    HTML形式やYAMLなどのネスト構造の形式文(テキストフォーマット)も可能。
    
    switch文の簡略な記述方式はreturn文の記入が不可なため不便。よって採用しない
     
    (java/ Java8 -> java11(11~)/『Java8からJava11の変更点』『Java do #19...』
		デザインパターン本: p247)

2021/ 10/ 29
  Eclipse のlombok(ラムボク)の設定。(標準で入っている)
  lombokあるとsetterなどの基本APIが@Setter, @EqualsAndHashCodeなどで自動補完してくれる。
  lombokあればcommons-lang要らないかも。
    All in Oneになってから標準適用されている。
	mavenなどの自動ビルドのコンフィグに記述するだけで利用可能。
    ビルドツール無しの普通のプロジェクトではビルドパスを追加して利用。
      のはずだが適用できない。自動インポートでlombok自体は引っ張れているが、コンパイルエラーになっている。
    ->  プロジェクト内のモジュールクラスのエラー警告文で『lombokを追加する』を実行すると解決した。
        module自体には元々requires lombok; の記述があり、上述の実行後ではモジュールクラスの記述自体に変更がなかった。
        それなら初めから機能しそうなものと思ったが、Eclipseの警告から実行しないと解決しなかった。
		サブクラスに@EqualsAndHashCode を記述した際、「親のフィールドを取り扱ってないよ」、とメッセージ来た。
		@EqualsAndHashCode(callSuoer=false)で親のフィールドも取り扱わない。(そもそも親のフィールド無い。)
  ビルドパスが正しいのにエラーの場合はEclipseの既存のビルド結果をクリーンすれば良い。
		プロジェクト -> クリーン
  
  lombokあるとコードがメッチャスッキリ！

2021/ 11/ 07
 デバッグ方法を覚えた。
    デバッグ実行 -> F5 -> 右上部コンソール(変数)で戻り値、フィールド等がわかる。
    コードの一部を選択肢て 「Ctrl + Shift + D」で選択した命令の実行ができ、
		(デバッグ・シェルの表示欄に記入 or マウスカーソルで実行で結果に飛んでくれる)
			下部コンソール(デバッグ・シェル)で命令結果が表示される。
      『Eclipse/ ショートカット/ eclipseでよく使うショートカット』
			『Eclipse/ Eclipseを使ったデバッグ方法を解説』
    
    今回はlombokのequals()がスーパークラスで実装されていないことを突き止められた。
      親のフィールドがObjectのequals()を呼び出していた(等値判定)。
			サブクラスのフィールドはlombokのequals()が呼び出せていた。

2021/ 11/ 09

2021/ 11/ 11
  正しいビルドパスを適用したのにプラグインが動作していない場合は
	ビルドパスを再構築(既存ビルド結果のクリーン)で解決。
  	プロジェクト -> クリーン

	lombok: @EqualsAndHashCodeはスーパークラスでも実装しないと正しくequals判定しないので注意

2021/ 11/ 15
  JUnit5 ビルドパスに導入(JUnitは基本ライブラリに入っていた。)
    上手く起動しない？結局例題がテストに向かないインスタンスではなかったから使用しなかった。
    JUnit5は4と比べ仕様が結構変わったぽい？数年前から登場しているからJUnit5を学ぶのが良さそう。

2022/ 03/ 26
  フォント変更「Source Han Sans JP(源ノ角ゴシック Code JP)」
		1: Githubでインストール ファイル名: SourceHanCodeJP-***(任意の字の太さ).ttf
		2: 右クリック -> すべてのユーザーに対してインストール
		    C/ Wondows/ Fonts/ *** にデータが保存される
		3: Eclipse起動 -> 
				バナー選択(ウィンドウ -> 設定) 
				-> 設定選択(一般 -> 外観 -> 色とフォント)
				-> 基本(テキスト・フォント)、デバッグ(変数テキスト・フォント) の2項目を
        -> 編集 -> 源ノ角ゴシック Code JP(標準、サイズ10)でおｋ。
  これで見やすいフォントになった。

  フォントの.zipはPleiadesに便宜上置いた。

  WSL(Ubuntu)もFontのconfigでWindowsのフォントを利用できるはずだが、源ノ角ゴシックが反映されない。
    無理。WSLというより、Windowsの設定の問題(レジストリいじる必要がある)のでダメ。危険すぎる。
